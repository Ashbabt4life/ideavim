package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.Qodana
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.gradle
import jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.qodana
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.ScheduleTrigger
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.schedule
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'Qodana'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("Qodana")) {
    expectSteps {
        gradle {
            name = "Generate grammar"
            tasks = "generateGrammarSource"
        }
        qodana {
            name = "Qodana"
            reportAsTests = true
            linter = jvm {
                version = Qodana.JVMVersion.LATEST
            }
            additionalDockerArguments = "-e QODANA_TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJvcmdhbml6YXRpb24iOiIzUFZrQSIsInByb2plY3QiOiIzN1FlQSIsInRva2VuIjoiM0t2bXoifQ.uohp81tM7iAfvvB6k8faarfpV-OjusAaEbWQ8iNrOgs"
            additionalQodanaArguments = "--baseline qodana.sarif.json"
            param("clonefinder-languages", "")
            param("collect-anonymous-statistics", "")
            param("licenseaudit-enable", "")
            param("clonefinder-languages-container", "")
            param("clonefinder-queried-project", "")
            param("clonefinder-enable", "")
            param("clonefinder-reference-projects", "")
        }
    }
    steps {
        update<Qodana>(1) {
            clearConditions()
            additionalDockerArguments = "-e QODANA_TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJvcmdhbml6YXRpb24iOiIzb0RycCIsInByb2plY3QiOiIzb0pRNyIsInRva2VuIjoiQVJEMGsifQ.ZXGyTl_rZgr4ccavv_K_QiWqdOiVfpCIHauQCu6aEF0"
        }
    }

    triggers {
        val trigger1 = find<ScheduleTrigger> {
            schedule {
                enabled = false
                schedulingPolicy = daily {
                    hour = 12
                    minute = 0
                    timezone = "SERVER"
                }
                triggerBuild = always()
                param("dayOfWeek", "Sunday")
            }
        }
        trigger1.apply {
            enabled = true
            triggerBuild = always()

        }
    }
}
